from __future__ import divisionimport csvfrom heapq import nlargestimport mathimport timedef print_timing(func):    def wrapper(*arg):        t1 = time.time()        res = func(*arg)        t2 = time.time()        print '%s took %0.3f ms' % (func.func_name, (t2-t1)*1000.0)        return res    return wrapperclass FeatureSelect():    def __init__(self):        self.docs = []        self.I = []        self.text = []        self.sVoc = 0    @print_timing    def calculate(self):        word_indices = [line.strip() for line in open("data/word_indices.txt")]        train_labels = [line.strip() for line in open("data/train_labels.txt")]        training_docs = []        train_pos = 0        with open("data/train.csv") as csvfile:            training = csv.reader(csvfile)            for row in training:                training_docs.append({                'label': int(train_labels[train_pos]),                'data': [int(e) for e in row]})                train_pos += 1                    self.sVoc = len(word_indices)        sVoc = self.sVoc        for i in xrange(sVoc):            Itemp = []            for j in xrange(2):                Pwy = (sum(1 for item in training_docs if (item['label'] == j and item['data'][i] > 0)) + 1) / (len(training_docs) + 1)                Pw = (sum(1 for item in training_docs if item['data'][i] > 0) + 1) / (len(training_docs) + 1)                Py = (sum(1 for item in training_docs if item['label'] == j) + 1) / (len(training_docs) + 1)                                Itemp.append(Pwy * math.log((Pwy / (Pw * Py)), 2))            self.I.append(sum(Itemp))            def get(self, num):        indexes = [i for i in xrange(len(self.I))]        return sorted(nlargest(num, indexes, key=lambda i: self.I[i]))    def make_data_files(self, num):        to_keep = self.get(num)        word_indices = [line.strip() for line in open("data/word_indices.txt")]        stripped_word_indices = [word_indices[i] for i in xrange(len(word_indices)) if i in to_keep]                with open("data/word_indices_feat.txt", 'w') as word_file:            for item in stripped_word_indices:                print>>word_file, item                        with open("data/train_feat.csv", 'wb') as csvfile:            writer = csv.writer(csvfile)            with open("data/train.csv") as csvfile2:                training = csv.reader(csvfile2)                for row in training:                    writer.writerow([row[i] for i in xrange(len(row)) if i in to_keep])                                        if __name__ == "__main__":                          fs = FeatureSelect()    fs.calculate()    fs.make_data_files(1000)